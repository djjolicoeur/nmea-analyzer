{"version":3,"sources":["nmea_analyzer/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,+HAEA,WAAKC,EAAEA;AAAP,AACEC;;AAEH,yDAAA,zDAACF,mJAEA,cAAAG,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASH;YAAT,AAAAI,4CAAAD,WAAA,IAAA,nEAAWG;YAAX,AAAAF,4CAAAD,WAAA,IAAA,nEAAiBI;AAAjB,AACE,6BAAA,mFAAA,zGAACC,mBAASH,uJAAgBC,cAAOC;;AAEpC,yDAAA,zDAACE,8HAEA,WAAAC,SAAkBV;AAAlB,AAAA,IAAAW,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaN;AAAb,AACE,IAAAS,aAA0B,+CAAA,/CAACD,4CAAIR;IAA/BS,iBAAA,AAAAF,4BAAAE;WAAA,AAAAD,4CAAAC,eAAA,lEAAcC;WAAd,AAAAF,4CAAAC,eAAA,lEAAmBE;AAAnB,AAAA,kDAAA,2kBAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,71BACWX,nBACA,sBAAA,mFAAA,iEAAA,kEAAA,5OAACG,nBACD,kUAAA,mFAAA,iEAAA,+DAAA,rhBAACA,q9BAC4BO,KAAKC;;AAEhD,yDAAA,zDAACP,2IAEA,aAAAQ,FAAKjB;AAAL,AAAA,IAAAkB,aAAAD;YAAA,AAAAb,4CAAAc,WAAA,IAAA,nEAAQlB;WAAR,AAAAI,4CAAAc,WAAA,IAAA,lEAAUH;WAAV,AAAAX,4CAAAc,WAAA,IAAA,lEAAeF;AAAf,AACE,AAACG,sCAAYJ,KAAKC;;AADpB;;AAID,yDAAA,zDAACP,oIAEA,WAAAW,SAAkBpB;AAAlB,AAAA,IAAAqB,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;SAAA,AAAAR,4CAAAQ,eAAA,hEAAahB;AAAb,AACE,AAACiB;;AADH,kDAAA,oIAEWjB,9CACA,iDAAA,kEAAA,nHAACkB,nBACD,6IAAA,mFAAA,iEAAA,kEAAA,nWAACf,nBACD,4XAAA,mFAAA,iEAAA,+DAAA,/kBAACA;;AAEb,yDAAA,zDAACT,0IAEA,WAAKM,GAAGL;AAAR,2FACMK,9CACA,iDAAA,kEAAA,nHAACkB,nBACD,4IAAA,mFAAA,iEAAA,kEAAA,lWAACf,1BACD,4bAAA,mFAAA,iEAAA,+DAAA,xoBAACA;;AAER,yDAAA,zDAACT,sIAEA,cAAAyB,HAAKnB;AAAL,AAAA,IAAAoB,aAAAD;QAAA,AAAApB,4CAAAqB,WAAA,IAAA,/DAASzB;YAAT,AAAAI,4CAAAqB,WAAA,IAAA,nEAAWC;AAAX,2FACMrB,9CACA,iDAAA,kEAAA,nHAACkB,nBACD,6IAAA,mFAAA,iEAAA,kEAAA,nWAACf,1BACD,qbAAA,mFAAA,iEAAA,lkBAACA,ioBAA8BkB;;AAUtC,yDAAA,zDAAC3B,2IAEC,cAAA4B,HAAKtB;AAAL,AAAA,IAAAuB,aAAAD;QAAA,AAAAvB,4CAAAwB,WAAA,IAAA,/DAAS5B;YAAT,AAAAI,4CAAAwB,WAAA,IAAA,nEAAWC;AAAX,AACE,YAAA,ZAACC,8BAAiCD;;AAClC,IAAME,WAAS,AAAA,mFAAOF;IAChBG,SAAO,AAACC,yCAAsBF;AADpC,AAEE,oBAAIC;AACF,AACE,YAAA,ZAACF,iDAAoDE;;AACrD,yDAAA,lDAACE,+CAAO7B,kEAAc8B,eACd,4DAAA,mNAAA,/QAACZ,qDAAMS,qEACW,AAAA,4FAAYH,kHACf,AAAA,uFAASA;;AAClC,AACE,YAAA,ZAACC,6CAAgDC;;AACjD1B","names":["re_frame.core.reg_event_db","_","nmea-analyzer.db/default-db","p__12804","vec__12805","cljs.core.nth","db","field","value","cljs.core/assoc-in","re_frame.core.reg_event_fx","p__12808","map__12809","cljs.core/--destructure-map","cljs.core.get","map__12810","host","port","p__12811","vec__12812","nmea-analyzer.websocket/connect!","p__12815","map__12816","nmea-analyzer.websocket/disconnect!","cljs.core.assoc","p__12817","vec__12818","error","p__12821","vec__12822","frame","js/console.log","sentence","parsed","nmea-analyzer.nmea-parser/parse-sentence","cljs.core.update","cljs.core/conj"],"sourcesContent":[";; src/nmea_analyzer/events.cljs\n(ns nmea-analyzer.events\n  (:require [re-frame.core :as rf]\n            [nmea-analyzer.db :as db]\n            [nmea-analyzer.nmea-parser :as parser]\n            [nmea-analyzer.websocket :as ws]))\n\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   db/default-db))\n\n(rf/reg-event-db\n :update-connection-field\n (fn [db [_ field value]]\n   (assoc-in db [:connection field] value)))\n\n(rf/reg-event-fx\n :connect-nmea\n (fn [{:keys [db]} _]\n   (let [{:keys [host port]} (get db :connection)]\n     {:db (-> db\n              (assoc-in [:connection :status] :connecting)\n              (assoc-in [:connection :error] nil))\n      :fx [[:dispatch [:attempt-connection host port]]]})))\n\n(rf/reg-event-fx\n :attempt-connection\n (fn [_ [_ host port]]\n   (ws/connect! host port)\n   {}))\n\n(rf/reg-event-fx\n :disconnect-nmea\n (fn [{:keys [db]} _]\n   (ws/disconnect!)\n   {:db (-> db\n            (assoc :connected? false)\n            (assoc-in [:connection :status] nil)\n            (assoc-in [:connection :error] nil))}))\n\n(rf/reg-event-db\n :connection-success\n (fn [db _]\n   (-> db\n       (assoc :connected? true)\n       (assoc-in [:connection :status] :connected)\n       (assoc-in [:connection :error] nil))))\n\n(rf/reg-event-db\n :connection-error\n (fn [db [_ error]]\n   (-> db\n       (assoc :connected? false)\n       (assoc-in [:connection :status] :error)\n       (assoc-in [:connection :error] error))))\n\n;(rf/reg-event-db\n; :nmea-frame-received\n; (fn [db [_ frame]]\n;   (-> db\n;       (update :nmea-frames conj frame)\n;       (update-in [:statistics :frame-count] inc)\n;       (assoc-in [:statistics :last-update] (js/Date.now)))))\n\n(rf/reg-event-db\n  :nmea-frame-received\n  (fn [db [_ frame]]\n    (js/console.log \"Frame received:\" frame)\n    (let [sentence (:data frame)\n          parsed (parser/parse-sentence sentence)]\n      (if parsed\n        (do\n          (js/console.log \"Successfully parsed NMEA sentence:\" parsed)\n          (update db :nmea-data conj\n                  (assoc parsed\n                         :timestamp (:timestamp frame)\n                         :source (:source frame))))\n        (do\n          (js/console.log \"Failed to parse NMEA sentence:\" sentence)\n          db)))))"]}