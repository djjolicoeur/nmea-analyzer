{"version":3,"sources":["nmea_analyzer/websocket.cljs"],"mappings":"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","names":["js/nmea-analyzer","js/nmea-analyzer.websocket","js/nmea-analyzer.websocket.websocket-connection","nmea-analyzer.websocket/websocket-connection","cljs.core.atom","nmea-analyzer.websocket/bridge-config","nmea-analyzer.websocket/parse-message","msg","e12399","data","cljs.core.js__GT_clj","js/JSON.parse","js/console.log","cljs.core/clj->js","G__12400","nmea-data","cljs.core/not-empty","re-frame.core/dispatch","js/Date.now","G__12401","js/console.error","js/Error","e","nmea-analyzer.websocket/handle-message","nmea-analyzer.websocket/create-websocket","ws-url","_","ws","js/WebSocket","event","cljs.core/reset!","error","nmea-analyzer.websocket/connect!","nmea-host","nmea-port","cljs.core/not","cljs.core/deref","e12402","js/JSON.stringify","nmea-analyzer.websocket/disconnect!"],"sourcesContent":[";; src/nmea_analyzer/websocket.cljs\n(ns nmea-analyzer.websocket\n  (:require [re-frame.core :as rf]))\n\n(defonce websocket-connection (atom nil))\n\n;; Bridge server configuration\n(def bridge-config\n  {:host \"localhost\"\n   :port 3000})\n\n;; Update the parse-message function in websocket.cljs\n(defn parse-message [msg]\n  (try\n    (let [data (js->clj (js/JSON.parse msg) :keywordize-keys true)]\n      (js/console.log \"Received message:\" (clj->js data)) ;; Debug log\n      (case (:type data)\n        \"nmea\" (let [nmea-data (:data data)]\n                 (when (not-empty nmea-data)\n                   (rf/dispatch [:nmea-frame-received \n                               {:timestamp (js/Date.now)\n                                :data nmea-data}])))\n        \"status\" (case (:status data)\n                  \"connected\" (do\n                              (js/console.log \"Successfully connected to NMEA device\")\n                              (rf/dispatch [:connection-success]))\n                  \"disconnected\" (do\n                                 (js/console.log \"Disconnected from NMEA device\")\n                                 (rf/dispatch [:connection-error (:error data)]))\n                  \"error\" (do\n                          (js/console.error \"NMEA connection error:\" (:error data))\n                          (rf/dispatch [:connection-error (:error data)]))\n                  (js/console.log \"Unknown status:\" (:status data)))\n        (js/console.log \"Unknown message type:\" (:type data))))\n    (catch js/Error e\n      (js/console.error \"Error parsing message:\" e)\n      (rf/dispatch [:connection-error (str \"Failed to parse message: \" (.-message e))])\n      nil)))\n\n\n(defn handle-message [msg]\n  (parse-message (.-data msg)))\n\n(defn create-websocket []\n  (let [ws-url (str \"ws://\" (:host bridge-config) \":\" (:port bridge-config))\n        _ (js/console.log \"Connecting to bridge at:\" ws-url) ;; Debug log\n        ws (js/WebSocket. ws-url)]\n    \n    (set! (.-onopen ws)\n          (fn [_]\n            (js/console.log \"Connected to bridge server\")))\n    \n    (set! (.-onclose ws)\n          (fn [event]\n            (js/console.log \"Bridge connection closed:\" (.-reason event)) ;; Debug log\n            (reset! websocket-connection nil)\n            (rf/dispatch [:connection-error \n                         (str \"Bridge connection closed: \" (.-reason event))])))\n    \n    (set! (.-onerror ws)\n          (fn [error]\n            (js/console.log \"Bridge connection error:\" error) ;; Debug log\n            (rf/dispatch [:connection-error \n                         \"Failed to connect to bridge server\"])))\n    \n    (set! (.-onmessage ws) handle-message)\n    ws))\n\n(defn connect! [nmea-host nmea-port]\n  (js/console.log \"Attempting to connect to NMEA device at:\" nmea-host \":\" nmea-port) ;; Debug log\n  (if-not @websocket-connection\n    (try\n      (let [ws (create-websocket)]\n        (reset! websocket-connection ws)\n        ;; Wait for WebSocket to open before sending connection request\n        (set! (.-onopen ws)\n              (fn [_]\n                (js/console.log \"Sending connect request to bridge\") ;; Debug log\n                (.send ws (js/JSON.stringify \n                          (clj->js {:type \"connect\"\n                                   :host nmea-host\n                                   :port nmea-port})))))\n        ws)\n      (catch js/Error e\n        (js/console.error \"Error creating WebSocket:\" e) ;; Debug log\n        (rf/dispatch [:connection-error (.-message e)])))\n    ;; If WebSocket exists, just send connect message\n    (do\n      (js/console.log \"Using existing bridge connection\") ;; Debug log\n      (.send @websocket-connection \n             (js/JSON.stringify \n              (clj->js {:type \"connect\"\n                       :host nmea-host\n                       :port nmea-port}))))))\n\n(defn disconnect! []\n  (when @websocket-connection\n    (js/console.log \"Disconnecting from NMEA device\") ;; Debug log\n    (.send @websocket-connection \n           (js/JSON.stringify (clj->js {:type \"disconnect\"})))\n    (.close @websocket-connection)\n    (reset! websocket-connection nil)))"]}