{"version":3,"sources":["nmea_analyzer/nmea_parser.cljs"],"mappings":"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","names":["nmea-analyzer.nmea-parser/nmea-sentence-types","nmea-analyzer.nmea-parser/nmea-coord->decimal","coord","dir","and__5023__auto__","degrees","js/parseInt","cljs.core.subs","minutes","js/parseFloat","decimal","multiplier","cljs.core._EQ_","nmea-analyzer.nmea-parser/parse-numeric","value","cljs.core.not_EQ_","nmea-analyzer.nmea-parser/process-fields","sentence-type","data","G__12753","cljs.core/Keyword","p1__12751#","cljs.core.update","p1__12752#","cljs.core.dissoc","nmea-analyzer.nmea-parser/checksum-valid?","sentence","e12757","temp__5823__auto__","vec__12758","cljs.core.nth","checksum","clojure.string.split","clojure.string/trim","calculated","cljs.core/rest","p1__12754#","p2__12755#","cljs.core.reduce","p1__12756#","goog.string/format","clojure.string/upper-case","e","js/console.log","nmea-analyzer.nmea-parser/parse-sentence","nmea-string","clojure.string/starts-with?","vec__12761","cleaned-string","parts","talker-id","cljs.core/first","cljs.core.keyword","sentence-def","cljs.core.get","raw-data","cljs.core/zipmap","cljs.core.merge"],"sourcesContent":[";; src/nmea_analyzer/nmea_parser.cljs\n(ns nmea-analyzer.nmea-parser\n  (:require\n   [clojure.string :as str]\n   [goog.string :as gstring]\n   [goog.string.format])) ;; This is required for gstring/format to work\n\n(def nmea-sentence-types\n  {:GGA {:name \"Global Positioning System Fix Data\"\n         :fields [:time :latitude :lat-dir :longitude :lon-dir\n                 :quality :satellites :hdop :altitude :altitude-units\n                 :geoid-separation :geoid-units :age-of-diff-data :diff-ref-station]}\n   :RMC {:name \"Recommended Minimum Navigation Info\"\n         :fields [:time :status :latitude :lat-dir :longitude :lon-dir\n                 :speed :track :date :magnetic-variation :mag-var-dir]}\n   :GLL {:name \"Geographic Position - Latitude/Longitude\"\n         :fields [:latitude :lat-dir :longitude :lon-dir :time :status :mode]}\n   :VTG {:name \"Track Made Good and Ground Speed\"\n         :fields [:track-true :true-indicator :track-magnetic :magnetic-indicator\n                 :speed-knots :knots-indicator :speed-kmh :kmh-indicator :mode]}\n   :GSA {:name \"GPS DOP and Active Satellites\"\n         :fields [:mode1 :mode2 :satellite1 :satellite2 :satellite3 :satellite4\n                 :satellite5 :satellite6 :satellite7 :satellite8 :satellite9\n                 :satellite10 :satellite11 :satellite12 :pdop :hdop :vdop]}\n   :GSV {:name \"GPS Satellites in View\"\n         :fields [:total-messages :message-number :satellites-in-view\n                 :prn1 :elevation1 :azimuth1 :snr1\n                 :prn2 :elevation2 :azimuth2 :snr2\n                 :prn3 :elevation3 :azimuth3 :snr3\n                 :prn4 :elevation4 :azimuth4 :snr4]}\n   :HDT {:name \"Heading - True\"\n         :fields [:heading :true-indicator]}\n   :HDM {:name \"Heading - Magnetic\"\n         :fields [:heading :magnetic-indicator]}\n   :MWV {:name \"Wind Speed and Angle\"\n         :fields [:angle :reference :speed :speed-units :status]}\n   :DBT {:name \"Depth Below Transducer\"\n         :fields [:depth-feet :feet :depth-meters :meters :depth-fathoms :fathoms]}\n   :DPT {:name \"Depth\"\n         :fields [:depth :offset :maximum-range]}\n   :MTW {:name \"Water Temperature\"\n         :fields [:temperature :unit]}\n   :VHW {:name \"Water Speed and Heading\"\n         :fields [:heading-true :true-indicator :heading-magnetic :magnetic-indicator\n                 :speed-knots :knots-indicator :speed-kmh :kmh-indicator]}\n   :VWR {:name \"Relative Wind Speed and Angle\"\n         :fields [:wind-angle :left-right :wind-speed-knots :knots-indicator\n                 :wind-speed-ms :ms-indicator :wind-speed-kmh :kmh-indicator]}\n   :VWT {:name \"True Wind Speed and Angle\"\n         :fields [:wind-angle :left-right :wind-speed-knots :knots-indicator\n                 :wind-speed-ms :ms-indicator :wind-speed-kmh :kmh-indicator]}\n   :ZDA {:name \"Time & Date\"\n         :fields [:time :day :month :year :local-zone-hours :local-zone-minutes]}\n   :APB {:name \"Autopilot Sentence B\"\n         :fields [:status1 :status2 :xte-magnitude :dir-to-steer :xte-units\n                 :arrival-status :arrival-perpendicular :bearing-origin-to-destination\n                 :bearing-type :destination-waypoint-id :bearing-present-to-destination\n                 :bearing-type2 :heading-to-steer :heading-type]}\n   :ROT {:name \"Rate Of Turn\"\n         :fields [:rate-of-turn :status]}\n   :RPM {:name \"Revolutions\"\n         :fields [:source :engine-number :speed :pitch :status]}\n   :RSA {:name \"Rudder Sensor Angle\"\n         :fields [:starboard-angle :starboard-status :port-angle :port-status]}\n   :XTE {:name \"Cross-Track Error\"\n         :fields [:status1 :status2 :xte-magnitude :dir-to-steer :xte-units]}\n   :XDR {:name \"Transducer Measurements\"\n         :fields [:type :data :units :name]}\n   :HDG {:name \"Heading - Deviation & Variation\"\n         :fields [:heading :deviation :dev-dir :variation :var-dir]}\n   \n   :PASHR {:name \"Attitude Data\"\n           :fields [:time :heading :heading-type :roll :pitch :heave\n                    :roll-accuracy :pitch-accuracy :heading-accuracy\n                    :quality :status]}})\n\n(defn- nmea-coord->decimal\n  \"Convert NMEA coordinate format to decimal degrees\"\n  [coord dir]\n  (when (and coord dir)\n    (let [degrees (js/parseInt (subs coord 0 2))\n          minutes (js/parseFloat (subs coord 2))\n          decimal (+ degrees (/ minutes 60))\n          multiplier (if (or (= dir \"N\") (= dir \"E\")) 1 -1)]\n      (* decimal multiplier))))\n\n(defn- parse-numeric\n  \"Safely parse numeric values\"\n  [value]\n  (when (and value (not= value \"\"))\n    (js/parseFloat value)))\n\n(defn- process-fields\n  \"Process specific fields based on sentence type\"\n  [sentence-type data]\n  (case sentence-type\n    (:GGA :RMC :GLL) (-> data\n                         (update :latitude #(nmea-coord->decimal % (:lat-dir data)))\n                         (update :longitude #(nmea-coord->decimal % (:lon-dir data)))\n                         (dissoc :lat-dir :lon-dir))\n    \n    (:DBT :DPT) (-> data\n                    (update :depth-meters parse-numeric)\n                    (update :depth-feet parse-numeric)\n                    (update :depth-fathoms parse-numeric))\n    \n    (:MWV :VWR :VWT) (-> data\n                         (update :speed parse-numeric)\n                         (update :angle parse-numeric))\n    \n    (:HDT :HDM) (update data :heading parse-numeric)\n    \n    (:ROT) (update data :rate-of-turn parse-numeric)\n    \n    ;; Default case - return unmodified data\n    data))\n\n(defn- checksum-valid?\n  \"Validate NMEA sentence checksum\"\n  [sentence]\n  (try\n    (when-let [[data checksum] (str/split (str/trim sentence) #\"\\*\")]\n      (let [calculated (->> (rest data)\n                            (reduce #(bit-xor %1 (int %2)) 0)\n                            (#(gstring/format \"%02X\" %)))]\n        (= calculated (str/upper-case checksum))))\n    (catch :default e\n      (js/console.log \"Checksum validation error:\" e)\n      false)))\n\n(defn parse-sentence\n  \"Parse NMEA sentence into structured data\"\n  [nmea-string]\n  (js/console.log \"Attempting to parse:\" nmea-string)\n  (when (and (string? nmea-string)\n             (str/starts-with? nmea-string \"$\"))\n    (let [cleaned-string (str/trim nmea-string)\n          [sentence checksum] (str/split cleaned-string #\"\\*\")\n          parts (str/split sentence #\",\")\n          talker-id (subs (first parts) 1 3)\n          sentence-type (-> (first parts)\n                            (subs 3)\n                            keyword)\n          data (rest parts)\n          sentence-def (get nmea-sentence-types sentence-type)]\n      (js/console.log \"Sentence type:\" sentence-type)\n      (js/console.log \"Sentence def:\" sentence-def)\n      (when sentence-def\n        (let [raw-data (zipmap (:fields sentence-def) data)]\n          (merge\n           {:type sentence-type\n            :talker-id talker-id\n            :raw cleaned-string}\n           (process-fields sentence-type raw-data)))))))\n\n"]}