["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___12971 = arguments.length;\nvar i__5750__auto___12972 = (0);\nwhile(true){\nif((i__5750__auto___12972 < len__5749__auto___12971)){\nargs__5755__auto__.push((arguments[i__5750__auto___12972]));\n\nvar G__12973 = (i__5750__auto___12972 + (1));\ni__5750__auto___12972 = G__12973;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((0) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5756__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__12929){\nvar map__12930 = p__12929;\nvar map__12930__$1 = cljs.core.__destructure_map(map__12930);\nvar m = map__12930__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12930__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12930__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12930__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5821__auto___12974 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5821__auto___12974){\nvar unknown_keys_12975 = temp__5821__auto___12974;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_12975], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5025__auto__ = id;\nif(cljs.core.truth_(or__5025__auto__)){\nreturn or__5025__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq12922){\nvar self__5735__auto__ = this;\nreturn self__5735__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12922));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__12938 = arguments.length;\nswitch (G__12938) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___12977 = arguments.length;\nvar i__5750__auto___12978 = (0);\nwhile(true){\nif((i__5750__auto___12978 < len__5749__auto___12977)){\nargs__5755__auto__.push((arguments[i__5750__auto___12978]));\n\nvar G__12979 = (i__5750__auto___12978 + (1));\ni__5750__auto___12978 = G__12979;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((3) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5756__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq12941){\nvar G__12942 = cljs.core.first(seq12941);\nvar seq12941__$1 = cljs.core.next(seq12941);\nvar G__12943 = cljs.core.first(seq12941__$1);\nvar seq12941__$2 = cljs.core.next(seq12941__$1);\nvar G__12944 = cljs.core.first(seq12941__$2);\nvar seq12941__$3 = cljs.core.next(seq12941__$2);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__12942,G__12943,G__12944,seq12941__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__12948 = arguments.length;\nswitch (G__12948) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__5755__auto__ = [];\nvar len__5749__auto___12982 = arguments.length;\nvar i__5750__auto___12983 = (0);\nwhile(true){\nif((i__5750__auto___12983 < len__5749__auto___12982)){\nargs__5755__auto__.push((arguments[i__5750__auto___12983]));\n\nvar G__12984 = (i__5750__auto___12983 + (1));\ni__5750__auto___12983 = G__12984;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5756__auto__ = ((((3) < args__5755__auto__.length))?(new cljs.core.IndexedSeq(args__5755__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5756__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq12953){\nvar G__12954 = cljs.core.first(seq12953);\nvar seq12953__$1 = cljs.core.next(seq12953);\nvar G__12955 = cljs.core.first(seq12953__$1);\nvar seq12953__$2 = cljs.core.next(seq12953__$1);\nvar G__12956 = cljs.core.first(seq12953__$2);\nvar seq12953__$3 = cljs.core.next(seq12953__$2);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__12954,G__12955,G__12956,seq12953__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5821__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5821__auto__)){\nvar f = temp__5821__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while its `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__12987 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__12987;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__12960 = arguments.length;\nswitch (G__12960) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :fx  [:dispatch [:an-event-id :param1]]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__12836__auto___12994 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__12836__auto___12994);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^P","~$re-frame.interop","^Q","~$re-frame.trace","^R","~$trace","^R","~$clojure.set","^T","~$set","^T","~$cljs.core","^V","~$goog","^W"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$console","^P","~$empty-queue","^Q","~$debug-enabled?","^Q"],"~:require-macros",["^ ","^R","^R","^S","^R","^V","^V"],"~:form",["~#list",["~$ns","^J",["^14",["^Y",["^P","~:refer",["^["]],["^Q","^16",["^10","^11"]],["^R","~:as","^S","~:include-macros",true],["^T","^17","^U"]]]]],"~:flags",["^ ","^Y",["^H",[]]],"~:js-deps",[],"~:deps",["^W","^V","^P","^Q","^R","^T"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1746802238509,"^K",["^ ","^P","^P","^Q","^Q","^R","^R","^S","^R","^T","^T","^U","^T","^V","^V","^W","^W"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^H",["~:cljs"]],"~:used-var-namespaces",["^H",["^Q","^J","^R","^V","~$js","^T","^P"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__12929","map__12930","cljs.core/--destructure-map","cljs.core.get","seq12922","self__5735__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5821__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__5025__auto__","G__12938","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq12941","G__12942","cljs.core/first","cljs.core/next","G__12943","G__12944","self__5734__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__12948","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq12953","G__12954","G__12955","G__12956","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__12960","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__12836__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1=","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^W","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1=","goog/dom/tagname.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.dom.HtmlElement"]]],["^1=","goog/labs/useragent/platform.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1=","goog/math/math.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/events/eventtype.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1=","goog/labs/useragent/browser.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2W","^2X","~$goog.labs.userAgent.chromiumRebrands","^2[","^2V","^2Y","^2Z"]]],["^1=","goog/html/safeurl.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2V"]]],["^1=","re_frame/loggers.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^T"]]],["^1=","goog/array/array.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2["]]],["^1=","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","~$clojure.string","~$clojure.walk","~$goog.object","^2S"]]],["^1=","goog/useragent/useragent.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2W","~$goog.reflect","^2V"]]],["^1=","goog/debug/error.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/flags/flags.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/events/events.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1=","goog/events/browserfeature.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/dom/nodetype.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/labs/useragent/highentropy/highentropyvalue.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2W","^2V"]]],["^1=","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^2T","^2S","~$reagent.impl.batching","^T","^39"]]],["^1=","re_frame/interop.cljs"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1=","goog/disposable/disposable.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1=","goog/string/typedstring.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["0377746c28dc1ee3e3c69e7bda65215fb91d6e60","dad22913866d4ec2d4a224d834f261b9777adf6a","e5ba555d9ff988c87ca0e5ef0877db54e3c8ec9e","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["~$shadow.js","~$module$node_modules$react$cjs$react_production","~$module$node_modules$react$cjs$react_development"]]],["^1=","shadow/js.js"],["5a5490ad211c8a91abe1b3f69c801a879ff9d324","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/object/object.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^E","^37","^2T","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^3G","^2S","^39"]]],["^1=","goog/dom/asserts.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2["]]],"~:SHADOW-TIMESTAMP",[1746747007000,1746747007000,1746747007000],["^3K","node_modules/react/cjs/react.development.js"],["0377746c28dc1ee3e3c69e7bda65215fb91d6e60","dad22913866d4ec2d4a224d834f261b9777adf6a","7411a4eebdfac8afc93d74dc318e6378384842dd","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^3L","~$module$node_modules$process$browser"]]],["^1=","goog/math/long.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","^3="]]],["^1=","goog/events/listener.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.events.ListenableKey"]]],["^1=","goog/html/trustedresourceurl.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","~$goog.fs.blob","^33","~$goog.html.SafeScript","~$goog.html.trustedtypes","^35","^36"]]],["^1=","goog/events/listenermap.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.array","~$goog.events.Listener","^39"]]],["^1=","goog/events/eventid.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/string/internal.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/functions/functions.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/html/safestyle.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^35","~$goog.html.SafeUrl","^36","^2[","^2V"]]],["^1=","goog/dom/safe.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3V","~$goog.html.SafeStyle","^3Z","^34","~$goog.html.uncheckedconversions","^35","^2V"]]],["^1=","goog/asserts/dom.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.dom.TagName","^2[","~$goog.dom.element"]]],["^1=","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^39","^E","^2T","^3C","^3Q","^3G","^2S"]]],["^1=","clojure/walk.cljs"],["bd5a1f596e8d50e9f8698e6f5ebb183a507f231a","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V"]]],["^1=","goog/html/safehtml.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^35","^3V","^43","~$goog.html.SafeStyleSheet","^3Z","^45","^34","^36","^2[","^3:","^3X","^39","^2V","~$goog.dom.tags","^3W"]]],["^1=","goog/dom/tags.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^39"]]],["^1=","goog/math/size.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/labs/useragent/engine.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3X","^2V","^2W"]]],["^1=","goog/fs/blob.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/dom/dom.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3X","^2[","^3[","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^45","~$goog.dom.safe","^42","^44","~$goog.math.Coordinate","~$goog.math.Size","^39","~$goog.string","^35","~$goog.string.Unicode","^31"]]],["^1=","goog/asserts/asserts.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.debug.Error","^4:"]]],["^1=","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V"]]],["^3K","node_modules/react/cjs/react.production.js"],["0377746c28dc1ee3e3c69e7bda65215fb91d6e60","dad22913866d4ec2d4a224d834f261b9777adf6a","43cfb2f3b9d5e8de10d6015ad6c6c2b05a03e823","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^3L","^3S"]]],["^1=","goog/uri/uri.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3X","^2[","~$goog.collections.maps","^4>","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/labs/useragent/highentropy/highentropydata.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2X"]]],["^1=","goog/collections/maps.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/events/eventtypehelpers.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3@","^31"]]],["^1=","goog/disposable/idisposable.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^3K","node_modules/process/browser.js"],["0377746c28dc1ee3e3c69e7bda65215fb91d6e60","dad22913866d4ec2d4a224d834f261b9777adf6a","015769d0c950757ef11a04033404e3d6ea739c58",["^ ","~:target","~:npm","^Y","process/browser"],"^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^3L"]]],["^1=","goog/fs/url.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/base.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",[]]],["^1=","goog/structs/structs.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3X","^39"]]],["^1=","goog/disposable/dispose.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","clojure/string.cljs"],["bd5a1f596e8d50e9f8698e6f5ebb183a507f231a","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^4>","~$goog.string.StringBuffer"]]],["^1=","goog/debug/entrypointregistry.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2["]]],["^1=","goog/string/string.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^4;","^44","^35","^2V"]]],["^1=","re_frame/interceptor.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^P","^Q","^R","^T"]]],["^1=","goog/reflect/reflect.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/labs/useragent/util.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2V","^2Z"]]],["^1=","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^E","~$reagent.impl.template","^3O","^2T","^3C","^3Q","^3G","^2S"]]],["^1=","goog/debug/debug.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3X","~$goog.debug.errorcontext"]]],["^1=","goog/string/stringbuffer.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/math/coordinate.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.math"]]],["^1=","goog/debug/errorcontext.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/labs/useragent/chromium_rebrands.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/labs/useragent/useragent.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.flags"]]],["^1=","goog/async/nexttick.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3>","~$goog.dom","^45","^41","^3:","^3;"]]],["^1=","goog/dom/element.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^4:","^45"]]],["^1=","goog/html/uncheckedconversions.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","^42","^3V","^43","^47","^3Z","^34","^35","^2V"]]],["^1=","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^3O","^3C","^3Q"]]],["^1=","goog/events/event.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.Disposable","~$goog.events.EventId"]]],["^1=","goog/dom/htmlelement.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","cljs/core.cljs"],["bd5a1f596e8d50e9f8698e6f5ebb183a507f231a","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.math.Long","~$goog.math.Integer","^4>","^39","^3X","~$goog.Uri","^4H"]]],["^1=","goog/html/safescript.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^35","^36","^3W","^2["]]],["^1=","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V"]]],["^1=","goog/html/safestylesheet.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^35","^43","^36","^39","^2[","^2V"]]],["^1=","goog/events/browserevent.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3=","^31"]]],["^1=","goog/math/integer.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3="]]],["^1=","goog/dom/browserfeature.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^31"]]],["^1=","clojure/set.cljs"],["bd5a1f596e8d50e9f8698e6f5ebb183a507f231a","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V"]]],["^1=","goog/uri/utils.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","^4>"]]],["^1=","goog/string/const.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^2[","^36"]]],["^1=","goog/disposable/disposeall.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^3I"]]],["^1=","goog/events/listenable.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","goog/events/listenablekey.js"],["61f9edb2f1fc155d4b11e1650d13d5753bd784f1","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W"]]],["^1=","re_frame/trace.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^W","^V","^Q","^P","^41"]]]]],"~:clj-info",["^ ","jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/compiler.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/java/io.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/set.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/source_map/base64_vlq.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/source_map.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/tools/reader.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/core.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/source_map/base64.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/string.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/externs.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/analyzer/passes.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/re-frame/re-frame/1.3.0/re-frame-1.3.0.jar!/re_frame/trace.cljc",1733862970000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/analyzer/passes/and_or.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/data/json.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/tagged_literals.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/env.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/analyzer/impl/namespaces.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/instant.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1734727891000,"jar:file:/Users/djjolicoeur/.m2/repository/re-frame/re-frame/1.3.0/re-frame-1.3.0.jar!/re_frame/interop.clj",1733862970000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/pprint.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/analyzer.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/analyzer/impl.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/js_deps.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1734727891000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/util.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/edn.clj",1730765361000,"jar:file:/Users/djjolicoeur/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1733862970000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/instant.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1734727891000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/org/clojure/clojurescript/1.12.38/clojurescript-1.12.38.jar!/cljs/core.cljc",1746747007000,"jar:file:/Users/djjolicoeur/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1734727891000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^Q","^R","^R","^S","^R","^T","^T","^U","^T","^V","^V","^W","^W"],"^X",["^H",["^Y"]],"~:shadow/js-access-global",["^H",["Error"]],"^Z",["^ ","^[","^P","^10","^Q","^11","^Q"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^14",["~$quote",["^14",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^14",["^5V","^5W","~$f","^5X"]]],"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]],"~:arglists-meta",["^14",[null]]]],"^I","^1W","^6","re_frame/interceptor.cljc","^:",20,"^5Y",["^ ","^5Z",true,"^5[",3,"^60",3,"^61",[["^14",["^5V","^5W","~$f","^5X"]]],"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]],"^62",["^14",[null]]],"^61",[["^14",["^5V","^5W","~$f","^5X"]]],"~:protocol-impl",null,"^5[",3,"^62",["^14",[null]],"^8",1,"^5Z",true,"~:methods",[["^ ","^5[",3,"^5Z",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^66","^9",42,"^60",3,"~:fn-var",true,"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]]],"~$invoke-interceptors",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5T",["^14",["^5U",["^14",[["^5V","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6:",true,"^I","^1Y","^6","re_frame/interceptor.cljc","^:",27,"^61",["^14",[["^5V","^6;"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",74,"^9",74,"^60",2,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V","^6;"]]]]],"^6<","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5T",["^14",["^5U",["^14",[["^5V","^5W","~$value"]]]]]],"^I","^2;","^6","re_frame/interceptor.cljc","^:",21,"^61",["^14",[["^5V","^5W","^6>"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",56,"^67",["^H",["~$clj","^66"]],"^9",56,"^60",3,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V","^5W","^6>"]]]]]],"~$update-coeffect",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5T",["^14",["^5U",["^14",[["^5V","^5W","~$f","~$&","^5X"]]]]],"^5Y",["^ ","^5Z",true,"^5[",3,"^60",3,"^61",[["^14",["^5V","^5W","~$f","^5X"]]],"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]],"^62",["^14",[null]]]],"^I","^28","^6","re_frame/interceptor.cljc","^:",22,"^5Y",["^ ","^5Z",true,"^5[",3,"^60",3,"^61",[["^14",["^5V","^5W","~$f","^5X"]]],"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]],"^62",["^14",[null]]],"^61",[["^14",["^5V","^5W","~$f","^5X"]]],"^63",null,"^5[",3,"^62",["^14",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",3,"^5Z",true,"^65","^66"]],"^7",60,"^67","^66","^9",60,"^60",3,"^68",true,"^5T",["^14",[["^5V","^5W","~$f","~$&","^5X"]]]],"~$invoke-interceptor-fn",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^6:",true,"^5T",["^14",["^5U",["^14",[["^5V","~$interceptor","^6;"]]]]]],"^6:",true,"^I","^2J","^6","re_frame/interceptor.cljc","^:",29,"^61",["^14",[["^5V","^6B","^6;"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",67,"^67",["^H",[null,"^66"]],"^9",67,"^60",3,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V","^6B","^6;"]]]]]],"~$get-effect",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5T",["^14",["^5U",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","~$not-found"]]]]],"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]],"^62",["^14",[null,null,null]]]],"^I","^1M","^6","re_frame/interceptor.cljc","^:",17,"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]],"^62",["^14",[null,null,null]]],"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^63",null,"^5[",3,"^62",["^14",[null,null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^66"],["^ ","^5[",2,"^5Z",false,"^65","^66"],["^ ","^5[",3,"^5Z",false,"^65",["^H",[null,"^66"]]]],"^7",30,"^9",30,"^60",3,"^68",true,"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]]],"~$->interceptor",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5T",["^14",["^5U",["^14",[["~$&",["^ ","^17","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5Y",["^ ","^5Z",true,"^5[",0,"^60",0,"^61",[["^14",[["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]],"^5T",["^14",[["~$&",["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]],"^62",["^14",[null]]]],"^I","^1R","^6","re_frame/interceptor.cljc","^:",20,"^5Y",["^ ","^5Z",true,"^5[",0,"^60",0,"^61",[["^14",[["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]],"^5T",["^14",[["~$&",["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]],"^62",["^14",[null]]],"^61",[["^14",[["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]],"^63",null,"^5[",0,"^62",["^14",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",0,"^5Z",true,"^65","~$cljs.core/IMap"]],"^7",17,"^67","^66","^9",17,"^60",0,"^68",true,"^5T",["^14",[["~$&",["^ ","^17","~$m","^6F",["^6G","^6H","^6I"]]]]]],"~$get-coeffect",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5T",["^14",["^5U",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]]]],"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]],"^62",["^14",[null,null,null]]]],"^I","^2@","^6","re_frame/interceptor.cljc","^:",19,"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]],"^62",["^14",[null,null,null]]],"^61",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]],"^63",null,"^5[",3,"^62",["^14",[null,null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^66"],["^ ","^5[",2,"^5Z",false,"^65","^66"],["^ ","^5[",3,"^5Z",false,"^65",["^H",[null,"^66"]]]],"^7",48,"^9",48,"^60",3,"^68",true,"^5T",["^14",[["^5V"],["^5V","^5W"],["^5V","^5W","^6D"]]]],"~$execute",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5T",["^14",["^5U",["^14",[["~$event-v","~$interceptors"]]]]],"^6<","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^I","^1P","^6","re_frame/interceptor.cljc","^:",14,"^61",["^14",[["^6M","^6N"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",146,"^67","^66","^9",146,"^60",2,"^68",true,"^5T",["^14",["^5U",["^14",[["^6M","^6N"]]]]],"^6<","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5T",["^14",["^5U",["^14",[["^5V","^5W","^6>"]]]]]],"^I","^2B","^6","re_frame/interceptor.cljc","^:",19,"^61",["^14",[["^5V","^5W","^6>"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",38,"^67",["^H",["^6?","^66"]],"^9",38,"^60",3,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V","^5W","^6>"]]]]]],"~$enqueue",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5T",["^14",["^5U",["^14",[["^5V","^6N"]]]]]],"^I","^20","^6","re_frame/interceptor.cljc","^:",14,"^61",["^14",[["^5V","^6N"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",111,"^67",["^H",["^6?","^66"]],"^9",111,"^60",2,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V","^6N"]]]]]],"~$mandatory-interceptor-keys",["^ ","^I","^2L","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^65","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5T",["^14",["^5U",["^14",[["~$m"]]]]]],"^I","^2C","^6","re_frame/interceptor.cljc","^:",19,"^61",["^14",[["~$m"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",11,"^67","~$boolean","^9",11,"^60",1,"^68",true,"^5T",["^14",["^5U",["^14",[["~$m"]]]]]],"~$change-direction",["^ ","^5S",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^6:",true,"^5T",["^14",["^5U",["^14",[["^5V"]]]]],"^6<","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6:",true,"^I","^2=","^6","re_frame/interceptor.cljc","^:",24,"^61",["^14",[["^5V"]]],"^63",null,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^7",132,"^67",["^H",["^6?","^66"]],"^9",132,"^60",1,"^68",true,"^5T",["^14",["^5U",["^14",[["^5V"]]]]],"^6<","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5V",["^ ","^5S",null,"^5",["^ ","^6:",true,"^6","re_frame/interceptor.cljc","^:",15,"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["~$event","^6N"],["^6V","^6N","~$db"]],"^5T",["^14",[["^6V","^6N"],["^6V","^6N","^6W"]]],"^62",["^14",[null,null]]],"^8",8,"^7",118,"^9",118,"^5T",["^14",["^5U",["^14",[["^6V","^6N"],["^6V","^6N","^6W"]]]]],"^6<","Create a fresh context"],"^6:",true,"^I","^1L","^6","re_frame/interceptor.cljc","^:",15,"^5Y",["^ ","^5Z",false,"^5[",3,"^60",3,"^61",[["^6V","^6N"],["^6V","^6N","^6W"]],"^5T",["^14",[["^6V","^6N"],["^6V","^6N","^6W"]]],"^62",["^14",[null,null]]],"^61",[["^6V","^6N"],["^6V","^6N","^6W"]],"^63",null,"^5[",3,"^62",["^14",[null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",2,"^5Z",false,"^65",["^H",["^6?","^66"]]],["^ ","^5[",3,"^5Z",false,"^65",["^H",["^6?","^66"]]]],"^7",118,"^9",118,"^60",3,"^68",true,"^5T",["^14",[["^6V","^6N"],["^6V","^6N","^6W"]]],"^6<","Create a fresh context"]],"^12",["^ ","^R","^R","^S","^R","^V","^V"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^73","^74","^7:","^77","^6Y","^75","^78","^71","^76","^72","^6[","^70","^6Z","^79"]],"^19",["^ ","^Y",["^H",[]]],"^1:",[],"^1;",["^W","^V","^P","^Q","^R","^T"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2N",[["^7>","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7>","~:shadow-tweaks"],null,["^7>","~:source-map-inline"],null,["^7>","~:shadow-optimize-constants"],null,["^7>","~:elide-asserts"],false,["^7>","~:optimize-constants"],null,["^7>","^1@"],null,["^7>","~:external-config"],null,["^7>","~:tooling-config"],null,["^7>","~:emit-constants"],null,["^7>","~:load-tests"],null,["^7>","~:form-size-threshold"],null,["^7>","~:global-goog-object&array"],null,["^7>","~:data-readers"],null,["~:shadow.build/config","^4F"],"~:browser",["^7>","~:infer-externs"],"~:auto",["^7>","^1B"],null,["^7@","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7>","~:fn-invoke-direct"],null,["^7>","~:source-map"],"/dev/null"]]]